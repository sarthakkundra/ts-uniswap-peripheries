// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LendGivenPrincipal extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LendGivenPrincipal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LendGivenPrincipal must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LendGivenPrincipal", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): LendGivenPrincipal | null {
    return changetype<LendGivenPrincipal | null>(
      store.get("LendGivenPrincipal", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value!.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value!.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get strike(): BigInt {
    let value = this.get("strike");
    return value!.toBigInt();
  }

  set strike(value: BigInt) {
    this.set("strike", Value.fromBigInt(value));
  }

  get maturity(): BigInt {
    let value = this.get("maturity");
    return value!.toBigInt();
  }

  set maturity(value: BigInt) {
    this.set("maturity", Value.fromBigInt(value));
  }

  get uniswapV3Fee(): i32 {
    let value = this.get("uniswapV3Fee");
    return value!.toI32();
  }

  set uniswapV3Fee(value: i32) {
    this.set("uniswapV3Fee", Value.fromI32(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get isToken0(): boolean {
    let value = this.get("isToken0");
    return value!.toBoolean();
  }

  set isToken0(value: boolean) {
    this.set("isToken0", Value.fromBoolean(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get positionAmount(): BigInt {
    let value = this.get("positionAmount");
    return value!.toBigInt();
  }

  set positionAmount(value: BigInt) {
    this.set("positionAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class BorrowGivenPrincipal extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BorrowGivenPrincipal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BorrowGivenPrincipal must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BorrowGivenPrincipal", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): BorrowGivenPrincipal | null {
    return changetype<BorrowGivenPrincipal | null>(
      store.get("BorrowGivenPrincipal", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value!.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value!.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get strike(): BigInt {
    let value = this.get("strike");
    return value!.toBigInt();
  }

  set strike(value: BigInt) {
    this.set("strike", Value.fromBigInt(value));
  }

  get maturity(): BigInt {
    let value = this.get("maturity");
    return value!.toBigInt();
  }

  set maturity(value: BigInt) {
    this.set("maturity", Value.fromBigInt(value));
  }

  get uniswapV3Fee(): i32 {
    let value = this.get("uniswapV3Fee");
    return value!.toI32();
  }

  set uniswapV3Fee(value: i32) {
    this.set("uniswapV3Fee", Value.fromI32(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get tokenTo(): Bytes {
    let value = this.get("tokenTo");
    return value!.toBytes();
  }

  set tokenTo(value: Bytes) {
    this.set("tokenTo", Value.fromBytes(value));
  }

  get longTo(): Bytes {
    let value = this.get("longTo");
    return value!.toBytes();
  }

  set longTo(value: Bytes) {
    this.set("longTo", Value.fromBytes(value));
  }

  get isToken0(): boolean {
    let value = this.get("isToken0");
    return value!.toBoolean();
  }

  set isToken0(value: boolean) {
    this.set("isToken0", Value.fromBoolean(value));
  }

  get isLong0(): boolean {
    let value = this.get("isLong0");
    return value!.toBoolean();
  }

  set isLong0(value: boolean) {
    this.set("isLong0", Value.fromBoolean(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get positionAmount(): BigInt {
    let value = this.get("positionAmount");
    return value!.toBigInt();
  }

  set positionAmount(value: BigInt) {
    this.set("positionAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
